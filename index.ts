import {ANTLRInputStream, CommonTokenStream} from 'antlr4ts';
import {ExprLexer} from './parser/ExprLexer';
import {ExprParser} from './parser/ExprParser';
import {ExprVisitor} from './parser/ExprVisitor';
import { AbstractParseTreeVisitor } from 'antlr4ts/tree/AbstractParseTreeVisitor';

// Custom visitor that extends the base visitor generated by ANTLR.
class CustomExprVisitor extends AbstractParseTreeVisitor<void> implements ExprVisitor<void> {
    defaultResult(): void {}

    visitChildren(ctx: any): void {
        if (!ctx) return;
        console.log(ctx.text);

        // Visit all children of the current node
        for (let i = 0; i < ctx.childCount; i++) {
            const child = ctx.getChild(i);
            child.accept(this);
        }
    }
}

const input = "10+20*30"
const chars = new ANTLRInputStream(input);
const lexer = new ExprLexer(chars);
const tokens = new CommonTokenStream(lexer);
const parser = new ExprParser(tokens);
const tree = parser.prog();

const visitor = new CustomExprVisitor()
visitor.visit(tree);
